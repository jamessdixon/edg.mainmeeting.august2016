1) Create Solution
2) Create Bot Project
3) Run the emulator

4) Create FSharp Project (F# 4.3, .NET 4.6)
5) Open Nuget and add FSharp.Data

#r "../packages/FSharp.Data.2.3.0/lib/net40/FSharp.Data.dll"
open FSharp.Data

6) Open yahoo and show data
  http://ichart.finance.yahoo.com/table.csv?s=MSFT
  type YahooContext = CsvProvider<"http://ichart.finance.yahoo.com/table.csv?s=MSFT">
  let stockInfo = YahooContext.Load("http://ichart.finance.yahoo.com/table.csv?s=MSFT")
  let mostRecent = stockInfo.Rows |> Seq.head
  mostRecent.``Adj Close``

7) Move Over to .fs
rename StockProvider.fs

8) Add references in bot project
	FSharp.Core (4.3)
	Other Project

9) Add in exception handling
        | :?  System.Net.WebException -> -1.0




1) Open Nuget and install-package FSharp.Charting

2) Add references
#load "../packages/FSharp.Charting.0.90.14/FSharp.Charting.fsx"

open System
open FSharp.Charting

3) Create Chart
let rows = YahooContext.Load("http://ichart.finance.yahoo.com/table.csv?s=MSFT").Rows
rows 
|> Seq.map(fun si -> si.Date, si.``Adj Close``)
|> Chart.FastLine

4) Show log

5) Open Nuget and install-package Accord.Statistics

6) Add in Accord Refereces
#r "../packages/Accord.3.0.2/lib/net40/Accord.dll"
#r "../packages/Accord.Statistics.3.0.2/lib/net40/Accord.Statistics.dll"
#r "../packages/Accord.Math.3.0.2/lib/net40/Accord.Math.dll"
open Accord
open Accord.Statistics
open Accord.Statistics.Models.Regression.Linear


7) Add in code
let x = rows |> Seq.map(fun si -> si.Date.ToOADate()) |> Seq.toArray
let y = rows |> Seq.map(fun si -> (float)si.``Adj Close``) |> Seq.toArray

8) Copy in code

let regression = SimpleLinearRegression()
let sse = regression.Regress(x,y)
let mse = sse/float x.Length 
let rmse = sqrt(mse)
let r2 = regression.CoefficientOfDetermination(x,y)

9) Type in code
let tomorrow = [|(new DateTime(2016,5,19)).ToOADate()|]
let predict =  regression.Compute(tomorrow)


10) Web.Cong
    <add key="AppId" value="chickensoftwareTRINUGStockBot" />
    <add key="AppSecret" value="fcc28f46ec6c40c9a5f5bb47a91efe93" />


1) Show Luis
intents
entities
review labels
publish (copy 1 label) how much are msft stocks

let predict =  regression.Compute(tomorrow)


1) Bring in luis json
2) Add in
#r "System.Net.Http.dll"
#r "System.Web.dll"
open System.Net.Http

[<Literal>]
let baseUri = "https://api.projectoxford.ai/luis/v1/application?id=4015e314-326d-4443-a3ad-854f37352e3d&subscription-key=847c177472014d77924e14b82600f35e&q=how%20much%20are%20msft%20stocks"
type LuisContext = JsonProvider<baseUri>


3) Add in
let client = new HttpClient()
let appId = "4015e314-326d-4443-a3ad-854f37352e3d"
let subscriptionKey = "847c177472014d77924e14b82600f35e"
let queryString = System.Web.HttpUtility.UrlEncode("how much are msft stocks")
let uri = "https://api.projectoxford.ai/luis/v1/application?id=" + appId + "&subscription-key=" + subscriptionKey + "&q=" + queryString
let message = client.GetAsync(uri).Result
let response = message.Content.ReadAsStringAsync().Result
let luis = LuisContext.Parse(response)
let entity = luis.Entities |> Seq.head
entity.Entity


4) Add in reference to

System.Net.Http and System.Web

open System.Net.Http
open System.Web

change client and message to use



https://chickensoftwarestockanalyzerbot.azurewebsites.net/api/messages

